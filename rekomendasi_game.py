# -*- coding: utf-8 -*-
"""rekomendasi_game.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqh868CfGly9BYOXb0PSGUYAsrVzR6Wi

# Data Loading
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

game = pd.read_csv('/content/Metacritic_games_of_all_time.csv')
game

"""# Exploratory Data Analysis"""

game.info()

game = game.rename(columns={'Unnamed: 0': 'game_id'})

print('Jumlah judul game: ', len(game.title.unique()))

"""## Univariate Analyisis"""

plt.figure(figsize=(10, 6))
sns.countplot(x='platform', data=game)
plt.title('Distribution of Platform')
plt.xlabel('Platform')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='rating', data=game)
plt.title('Distribution of Content Rating')
plt.xlabel('Content Rating')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

genre_counts = game['genre(s)'].str.split(',').explode().value_counts().head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=genre_counts.index, y=genre_counts.values)
plt.title('Top 10 Game Genres')
plt.xlabel('Genre')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

genre_counts = game['developer'].str.split(',').explode().value_counts().head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=genre_counts.index, y=genre_counts.values)
plt.title('Top 10 Game Developer')
plt.xlabel('Genre')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(game['critic_score'].dropna(), kde=True)
plt.title('Distribution of critic scores')
plt.xlabel('Scores')
plt.ylabel('Frequency')
plt.show()

max_rating = game['critic_score'].max()
mean_rating = game['critic_score'].mean()
min_rating = game['critic_score'].min()

print(f"Max Rating: {max_rating}")
print(f"Mean Rating: {mean_rating}")
print(f"Min Rating: {min_rating}")

plt.figure(figsize=(8, 6))
sns.histplot(game['user_score'].dropna(), kde=True)
plt.title('Distribution of User Scores')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

print('User Score: ', game.user_score.unique())

top_10_uscore = game['user_score'].value_counts().nlargest(10)
top_10_uscore

"""# Data Preparation

## Kesalahan Tipe Data
"""

game.info()

game['user_score'] = pd.to_numeric(game['user_score'], errors='coerce')

print(game['user_score'].dtype)

"""## Missing Value"""

game.isna().sum()

nan_critic_score = game[game['critic_score'].isna()]
nan_critic_score

game.dropna(subset=['critic_score', 'user_score'], inplace=True)

rating = game[game['rating'].isna()]
rating

game.dropna(subset=['rating'], inplace=True)

game.shape

game.isna().sum()

"""## Duplikasi Data"""

game['title'].value_counts()

game_filtered = game[game['title'] == "Resident Evil: Revelations"]
game_filtered

game = game[~game['title'].duplicated(keep='first')]

game['title'].value_counts()

"""## Feature Engineering"""

rec_game = game[['game_id', 'title', 'genre(s)']]
rec_game.head()

rec_game.loc[rec_game['genre(s)'].str.contains('Sci-Fi', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Sci-Fi', 'scifi')
rec_game.loc[rec_game['genre(s)'].str.contains('Open-World', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Open-World', 'openworld')
rec_game.loc[rec_game['genre(s)'].str.contains('Third-Person', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Third-Person', 'thirdperson')
rec_game.loc[rec_game['genre(s)'].str.contains('First-Person', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('First-Person', 'firstperson')
rec_game.loc[rec_game['genre(s)'].str.contains('Role-Playing', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Role-Playing', 'roleplaying')
rec_game.loc[rec_game['genre(s)'].str.contains('GT / Street', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('GT / Street', 'gtstreet')
rec_game.loc[rec_game['genre(s)'].str.contains('Turn-Based', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Turn-Based', 'turnbased')
rec_game.loc[rec_game['genre(s)'].str.contains('Western-Style', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Western-Style', 'westernstyle')
rec_game.loc[rec_game['genre(s)'].str.contains('PC-style', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('PC-style', 'pcstyle')
rec_game.loc[rec_game['genre(s)'].str.contains('Japanese-Style', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Japanese-Style', 'japanstyle')
rec_game.loc[rec_game['genre(s)'].str.contains('Rally / Offroad', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Rally / Offroad', 'rally')
rec_game.loc[rec_game['genre(s)'].str.contains('Skate / Skateboard', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Skate / Skateboard', 'skateboard')
rec_game.loc[rec_game['genre(s)'].str.contains('Point-and-Click', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Point-and-Click', 'pointandclick')
rec_game.loc[rec_game['genre(s)'].str.contains('Turn-Based', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Turn-Based', 'turnbased')
rec_game.loc[rec_game['genre(s)'].str.contains('Top-Down', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Top-Down', 'topdown')
rec_game.loc[rec_game['genre(s)'].str.contains('Party / Minigame', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Party / Minigame', 'minigame')
rec_game.loc[rec_game['genre(s)'].str.contains('Board / Card Game', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Board / Card Game', 'cardgame')
rec_game.loc[rec_game['genre(s)'].str.contains('Real-Time', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Real-Time', 'realtime')
rec_game.loc[rec_game['genre(s)'].str.contains('Exercise / Fitness', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Exercise / Fitness', 'fitness')
rec_game.loc[rec_game['genre(s)'].str.contains('Mission-based', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Mission-based', 'missionbased')
rec_game.loc[rec_game['genre(s)'].str.contains('Business / Tycoon', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Business / Tycoon', 'business')
rec_game.loc[rec_game['genre(s)'].str.contains('Trivia / Game Show', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Trivia / Game Show', 'trivia')
rec_game.loc[rec_game['genre(s)'].str.contains('Ski / Snowboard', na=False), 'genre(s)'] = rec_game['genre(s)'].str.replace('Ski / Snowboard', 'snowboard')

rec_game.head()

game_id = rec_game['game_id'].tolist()

game_title = rec_game['title'].tolist()

game_genre = rec_game['genre(s)'].tolist()

"""# Model Development Content Based Filtering"""

# Membuat dictionary untuk data , 'game_id', 'title', 'genre'
game_new = pd.DataFrame({
    'id': game_id,
    'title': game_title,
    'genre': game_genre
})
game_new.head()

"""## One Hot Encoding"""

genre_list = []

# Membuat daftar genre unik
for index in game_new.index:
    temp = game_new['genre'][index].split(',')
    for i in temp:
        if i not in genre_list:
            genre_list.append(i)

onehot_df = pd.DataFrame(0, index=game_new.index, columns=genre_list)

# Mengisi nilai 1 untuk genre yang sesuai
for index in game_new.index:
    temp = game_new['genre'][index].split(',')
    for i in temp:
        onehot_df.loc[index, i] = 1

game_new = pd.concat([game_new, onehot_df], axis=1).fillna(0)
game_new.head()

"""## TF-IDF Vectorizer"""

from sklearn.feature_extraction.text import TfidfVectorizer

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data genre
tf.fit(game_new['genre'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(game_new['genre'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan jenis masakan
# Baris diisi dengan nama game

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=game_new.title
).sample(22, axis=1).sample(10, axis=0)

"""## Cosine Similarity"""

from sklearn.metrics.pairwise import cosine_similarity

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa title game
cosine_sim_df = pd.DataFrame(cosine_sim, index=game_new['title'], columns=game_new['title'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap game
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""## Euclidean Distance"""

from sklearn.metrics.pairwise import euclidean_distances

euclidean_sim = euclidean_distances(tfidf_matrix)
euclidean_sim

euclidean_sim_df = pd.DataFrame(euclidean_sim, index=game_new['title'], columns=game_new['title'])
print('Shape:', euclidean_sim_df.shape)

euclidean_sim_df.sample(5, axis=1).sample(10, axis=0)

"""## Rekomendasi

### Rekomendasi dengan Cosine Similarity
"""

def game_cosine(title_game, similarity_data=cosine_sim_df, items=game_new[['title', 'genre']], k=10):
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,title_game].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop name agar title game yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(title_game, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

rec_game[rec_game.title.eq('Sleeping Dogs')]

game_cosine('Sleeping Dogs')

"""### Rekomendasi dengan Euclidean Distance"""

def game_euclidean(title_game, similarity_data=euclidean_sim_df, items=game_new[['title', 'genre']], k=10):
    similarity_scores = similarity_data[title_game].to_numpy()

    closest_indices = similarity_scores.argsort()[:k]

    closest_games = similarity_data.columns[closest_indices]

    closest_games = closest_games.drop(title_game, errors='ignore')

    if len(closest_games) < k:
        additional_games = similarity_data.columns[similarity_scores.argsort()[k:2*k]]
        closest_games = closest_games.append(additional_games).drop_duplicates()

    result_euclidean = pd.DataFrame(closest_games[:k], columns=['title'])

    result_euclidean = result_euclidean.merge(items, on='title', how='left')

    return result_euclidean.head(k)

rec_game[rec_game.title.eq('Call of Duty')]

game_euclidean('Call of Duty')

"""### Precision Model"""

relevant_games = game[game['genre(s)'].str.contains('Action') | game['genre(s)'].str.contains('Adventure')]
actual_relevant = relevant_games['title'].tolist()

cosine_recommended = game_cosine('God of War')['title'].tolist()  # 10 rekomendasi dengan Cosine Similarity
euclidean_recommended = game_euclidean('Call of Duty')['title'].tolist()  # 10 rekomendasi dengan Euclidean Distance

print("Cosine Similarity Recommends:", cosine_recommended)
print("Euclidean Distance Recommends:", euclidean_recommended)

def precision_at_k(recommended, actual, k=10):
    relevant_items = sum([1 for game in recommended[:k] if game in actual])
    precision = relevant_items / k if k > 0 else 0
    return precision

precision_cosine = precision_at_k(cosine_recommended, actual_relevant, k=10)
precision_euclidean = precision_at_k(euclidean_recommended, actual_relevant, k=10)

# Menampilkan hasil Precision dan Recall
print(f"Precision at k for Cosine Similarity: {precision_cosine:.2f}")
print(f"Precision at k for Euclidean Distance: {precision_euclidean:.2f}")